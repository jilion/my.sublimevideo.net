<%
usages = Stat.usages(@date_range_from, @date_range_to, { :site_id => site.try(:id) })
plans = Plan.all

graph = Graph.new do |g|
  g.option(chart: chart('timeline_usage'))
  g.option(title: { text: "VPV per day, total and averages for #{site.hostname.present? ? hostname_with_path_and_wildcard(site) : site.token}" })
  g.option(subtitle: usage_date_subtitle(@date_range_from, @date_range_to))
  g.option(legend: legend)
  g.option(xAxis: {
    type: 'datetime', showFirstLabel: true, showLastLabel: true, gridLineWidth: 1,
    dateTimeLabelFormats: {
    	day: '%e %b',
    	week: '%e %b'
    },
    labels: {
      y: 15
    },
    plotBands: [{
        color: '#FFFFD9',
        from: (Time.now.utc.beginning_of_day - 30.days).to_i * 1000,
        to: Time.now.utc.beginning_of_day.to_i * 1000
    }]
  })
  g.raw_option(%(yAxis: {
    title: {
      text: 'Video-page views',
      margin: 70
    },
    min: 0,
    labels: {
      formatter: function() { return Highcharts.numberFormat(this.value, 0); }
    }
  }))
  g.raw_option(%(tooltip: {
    formatter: function() {
      var date = "<strong>" + Highcharts.dateFormat("%B %e,  %Y", this.x) + "</strong><br/>";
      var percentage_of_total = '';
      var loader_per_player = '';
      var total = '';

      if (["Invalid", "Invalid cached", "Dev", "Dev cached", "Main", "Main cached"].indexOf(this.series.name) != -1) {
        percentage_of_total = " (" + Highcharts.numberFormat(this.percentage, 1) + "%)";
        total = "<br/>Total: " + Highcharts.numberFormat(this.total, 0);
      }
      else if (this.series.name == "Loader") {
        loader_per_player = "<br/>Loader / Player: " + Highcharts.numberFormat((this.y / (this.total - this.y)), 1);
      }

      return date + this.series.name + ": " + Highcharts.numberFormat(this.y, 0) + percentage_of_total + loader_per_player + total;
    }
  }))
  g.option(series: [
    serie(usages["loader_usage"], 'Loader', '#AA0', visible: false),
    serie(usages["invalid_usage_cached"], 'Invalid cached', '#F80', visible: false),
    serie(usages["invalid_usage"], 'Invalid', '#F00', visible: false),
    serie(usages["dev_usage_cached"], 'Dev cached', '#1C1', visible: false),
    serie(usages["dev_usage"], 'Dev', '#3F3', visible: false),
    serie(usages["main_usage_cached"], 'Main cached', '#08F'),
    serie(usages["main_usage"], 'Main', '#00F'),

    serie(evolutive_average_array(usages["total_loader_usage"]), 'AVG Loader', '#FF0', type: 'line', visible: false),
    serie(evolutive_average_array(usages["total_invalid_usage"]), 'AVG Invalid', '#FC3', type: 'line', visible: false),
    serie(evolutive_average_array(usages["total_dev_usage"]), 'AVG Dev', '#6F6', type: 'line', visible: false),
    serie(evolutive_average_array(usages["total_main_usage"].zip(usages["main_usage_cached"]).map { |item| item.reduce(:+) }), 'AVG Main', '#0FF', :type => 'line'),

    serie(usages["total_main_usage"], 'TOT Main', '', type: 'line', visible: false),
    serie(usages["total_all_usage"], 'TOT All', '', type: 'line', visible: false),

    plans.inject([]) do |memo, plan|
      memo << serie(Array.new(usages["main_usage"].size, plan.player_hits / 30), "AVG #{plan.name.humanize}", '', type: 'line', visible: false); memo
    end,

    plans.inject([]) do |memo, plan|
      memo << serie(Array.new(usages["main_usage"].size, plan.player_hits), "LIM #{plan.name.humanize}", '', type: 'line', visible: false); memo
    end
  ].flatten)
  g.option(plotOptions: plot_options(@date_range_from))
  g.option(credits: credits)
end
%>
<div id="timeline_usage" style="width: 100%; height: 300px;"><%= raw graph.draw %></div>
