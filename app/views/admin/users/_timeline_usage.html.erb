<%
usages = Stat::SiteUsage.timeline(@date_range_from, @date_range_to, { site_ids: user.site_ids, merge_cached: true })
plans  = Plan.all
chart_title = "VPV per day, total and averages for #{user.full_name}"

graph = Graph.new do |g|
  g.option(chart: chart('timeline_usage'))
  g.option(title: { text: chart_title })
  g.option(subtitle: usage_date_subtitle(@date_range_from, @date_range_to))
  g.option(legend: legend(width: 600))
  g.option(xAxis: {
    type: 'datetime', showFirstLabel: true, showLastLabel: true, gridLineWidth: 1,
    dateTimeLabelFormats: {
    	day: '%e %b',
    	week: '%e %b'
    },
    labels: {
      y: 15
    },
    plotBands: [{
        color: '#FFFFD9',
        from: (Time.now.utc.beginning_of_day - 30.days).to_i * 1000,
        to: Time.now.utc.beginning_of_day.to_i * 1000
    }]
  })
  g.raw_option(%(yAxis: {
    title: {
      text: 'Video-page views',
      margin: 70
    },
    min: 0,
    labels: {
      formatter: function() { return Highcharts.numberFormat(this.value, 0); }
    }
  }))
  g.raw_option(%(tooltip: {
    borderWidth: 0,
    backgroundColor: "rgba(0, 0, 0, .70)",
    style: {
    	color: '#FFFFFF',
    	padding: '5px'
    },
    formatter: function() {
      var date = "<strong>" + Highcharts.dateFormat("%B %e,  %Y", this.x) + "</strong><br/><br/>";
      var label = '';

      if (["Invalid", "Dev", "Extra", "Main"].indexOf(this.series.name) != -1) {
        label = " of " + Highcharts.numberFormat(this.total, 0) + " (" + Highcharts.numberFormat(this.percentage, 1) + "%)";
      }
      else if (this.series.name == "Loader") {
        label = "<br/>Loader / Player: " + Highcharts.numberFormat((this.y / (this.total - this.y)), 1);
      }
      label = "<strong>" + Highcharts.numberFormat(this.y, 0) + "</strong>" + label;
      
      return date + this.series.name + " hits:<br/>" + label;
    }
  }))
  g.option(series: [
    serie(usages["loader_usage"], 'Loader', '#AAAA00', visible: false),
    serie(usages["invalid_usage"], 'Invalid', '#FF0000', visible: false),
    serie(usages["dev_usage"], 'Dev', '#33FF33', visible: false),
    serie(usages["extra_usage"], 'Extra', '#33FF33', visible: false),
    serie(usages["main_usage"], 'Main', '#0000FF'),

    # serie(evolutive_average_array(usages["total_loader_usage"]), 'AVG Loader', '#FFFF00', type: 'line', visible: false),
    # serie(evolutive_average_array(usages["total_invalid_usage"]), 'AVG Invalid', '#FFCC33', type: 'line', visible: false),
    # serie(evolutive_average_array(usages["total_dev_usage"]), 'AVG Dev', '#66FF66', type: 'line', visible: false),
    serie(evolutive_average_array(usages["total_main_usage"]), 'AVG Main', '#00FFFF', type: 'line'),

    serie(usages["total_main_usage"], 'TOT Main', '', type: 'line', visible: false)
  ].flatten)
  g.option(plotOptions: plot_options(@date_range_from))
  g.option(credits: credits)
end
%>
<div id="timeline_usage" style="width:100%; height:300px;"><%= raw graph.draw %></div>
