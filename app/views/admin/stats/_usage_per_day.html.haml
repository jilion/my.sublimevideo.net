:ruby
  from_days ||= 60
  stats_from  = from_days.days.ago.beginning_of_day
  
  usages = Stat.usages(stats_from, Date.today)
  
  graph = Graph.new do |g|
    g.option(chart: chart('usage_per_day'))
    g.option(title: { text: "VPV per day, total and averages" })
    g.option(subtitle: usage_date_subtitle(stats_from, { :date_format => :seconds_timezone }))
    g.option(legend: legend)
    g.option(xAxis: { type: 'datetime', showFirstLabel: true, showLastLabel: true })
    g.raw_option(%(yAxis: {
      title: {
        text: 'Video-page views',
        margin: 70
      },
      min: 0,
      labels: {
        formatter: function() { return Highcharts.numberFormat(this.value, 0, '.', "'"); }
      }
    }))
    g.raw_option(%(tooltip: {
      formatter: function() {
        var date = "<strong>" + Highcharts.dateFormat("%B %e,  %Y", this.x) + "</strong><br/>";
        var percentage_of_total = '';
        var percentage_of_limit = '';
        
        if (["Invalid", "Invalid cached", "Dev", "Dev cached", "Main", "Main cached"].indexOf(this.series.name) != -1) {
          percentage_of_total = " (" + Highcharts.numberFormat(this.percentage, 1) + "%)";
        }
        else if (this.series.name == "Loader") {
          percentage_of_limit = "<br/>Loader / Player: " + Highcharts.numberFormat((this.y / (this.total - this.y)), 1);
        }
        
        return date + this.series.name + ": " + Highcharts.numberFormat(this.y, 0) + percentage_of_total + percentage_of_limit;
      }
    }))
    g.option(series: [
      serie(usages["loader_usage"], 'Loader', '#AA0', :visible => false),
      serie(usages["invalid_usage_cached"], 'Invalid cached', '#F80'),
      serie(usages["invalid_usage"], 'Invalid', '#F00'),
      serie(usages["dev_usage_cached"], 'Dev cached', '#1C1'),
      serie(usages["dev_usage"], 'Dev', '#3F3'),
      serie(usages["main_usage_cached"], 'Main cached', '#08F'),
      serie(usages["main_usage"], 'Main', '#00F'),
      
      serie(evolutive_average_array(usages["total_loader_usage"]), 'AVG Loader', '#FF0', :type => 'line', :visible => false),
      serie(evolutive_average_array(usages["total_invalid_usage"]), 'AVG Invalid', '#FC3', :type => 'line', :visible => false),
      serie(evolutive_average_array(usages["total_dev_usage"]), 'AVG Dev', '#6F6', :type => 'line', :visible => false),
      serie(evolutive_average_array(usages["total_main_usage"]), 'AVG Main', '#0FF', :type => 'line'),
      
      serie(usages["total_main_usage"], 'TOT Main', '', :type => 'line', :visible => false),
      serie(usages["total_all_usage"], 'TOT All', '', :type => 'line', :visible => false)
    ])
    g.option(plotOptions: plot_options(stats_from))
    g.option(credits: credits)
  end
  
#usage_per_day{ :style => "width: 100%; height: 650px;" }= raw graph.draw(:observe => request.xhr? ? false : "dom:loaded")