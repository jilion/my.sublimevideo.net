<%
site_billed_at = 30.days.ago # we fake ~ site.billed_at: 1.month.ago.change(:day => site.billed_at)
stats_from  ||= site ? site_billed_at : 30.days.ago.beginning_of_day
interval    = 1.day
max_zoom    = 15.days
title       ||= "Video usage per day"
usages      = Stat::Global.usage(stats_from, site ? site.id : nil)
main_usages = usages.map { |u| u["main_usage"].to_i }
monthly_plan_limit = 20000 # we fake ~ site.plan.limit
daily_plan_limit = monthly_plan_limit / 30 # we fake ~ site.plan.limit
total_usage = main_usages.inject([]) do |memo, u|
  memo << ((memo.last || 0) + u)
end
%>
<script type = "text/javascript" charset="utf-8">
  document.observe("dom:loaded", function() {
    var chart = new Highcharts.Chart({
      chart: {
        renderTo: 'usage_per_day',
        zoomType: 'x'
      },
      title: {
        text: '<%= title %>'
      },
      subtitle: {
        text: ''
      },
      
      xAxis: {
        type: 'datetime',
        tickPixelInterval: 150
        // maxZoom: <%= max_zoom * 1000 %>,
        // startOnTick: true,
        // endOnTick: true,
        // showLastLabel: true,
        // tickmarkPlacement: "on",
        // tickInterval: <%= interval* 2 * 1000 %>
      },
      yAxis: {
        title: {
          text: 'Video-page views',
          min: 0,
          // startOnTick: true,
          // showFirstLabel: true,
          margin: 70
        },
        labels: {
          formatter: function() {
            return Highcharts.numberFormat(this.value, 0, '.', "'");
          }
        }
      },
      legend: {
        style: {
          left: 'auto',
          bottom: 'auto',
          right: '70px',
          top: '35px'
        },
        backgroundColor: '#FFFFFF',
        borderColor: '#CCC',
        borderWidth: 1,
        shadow: false
      },
      tooltip: {
        formatter: function() {
          if (['Daily normal average (perso)', 'Daily normal average (huge)'].indexOf(this.series.name) != -1) return false;
          
          var date = function(chart){
            var d = null;
            if (chart.series.name == "Your usage average") {
              d = "From " + Highcharts.dateFormat("%B %e,  %Y", chart.series.data[0].x) + " to " + Highcharts.dateFormat("%B %e,  %Y", chart.series.data[chart.series.data.length-1].x);
            } else if (['Dev video-page views', 'Main video-page views'].indexOf(chart.series.name) != -1) {
              d = Highcharts.dateFormat("%B %e,  %Y", chart.x);
            }
            return d ? "<b>" + d + "</b><br/>" : '';
          }
          
          var percentage_of_limit = '';
          if (this.series.name == "Total usage") {
            percentage_of_limit = "<br/>" + Highcharts.numberFormat((this.y / <%= monthly_plan_limit %>)*100, 0) + "% of limit";
          }
          
          // Display " / total" only for main player hits
          var on_total = '';
          if (this.series.name == "Main video-page views") {
            on_total = " / " + this.total;
          }
          
          // Display percentage of daily average limit only for main player hits and usage average
          if (['Dev video-page views', 'Main video-page views', 'Your usage average'].indexOf(this.series.name) != -1) {
            percentage_of_limit = "<br/>" + Highcharts.numberFormat((this.y / <%= daily_plan_limit %>)*100, 1) + "% of normal average";
          }
          
          return date(this) + this.series.name + ": " + Highcharts.numberFormat(this.y, 0) + on_total + percentage_of_limit;
        }
      },
      series: [
        {
          type: 'column',
          name: 'Dev video-page views',
          color: '#CCC',
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= stats_from.to_i * 1000 %>,
          data: <%= usages.map { |u| u["dev_usage"].to_i } %>
        },
        {
          type: 'column',
          name: 'Main video-page views',
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= stats_from.to_i * 1000 %>,
          data: <%= main_usages %>
        },
        {
          type: 'line',
          name: 'Your usage average',
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= stats_from.to_i * 1000 %>,
          // data: <%= Array.new(main_usages.size, main_usages.mean.to_i) %>
          data: <%= 
            array = Array.new
            total_usage.each_with_index { |item, index| array << (item / (index + 1)).to_i }
            array
          %>
        },
        {
          type: 'line',
          name: 'Daily normal average (pro)',
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= stats_from.to_i * 1000 %>,
          data: <%= Array.new(main_usages.size, daily_plan_limit) %>
        },
        {
          type: 'line',
          name: 'Total usage',
          visible: false,
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= stats_from.to_i * 1000 %>,
          data: <%= total_usage %>
        },
        // {
        //   type: 'line',
        //   name: 'Daily normal average (perso)',
        //   pointInterval: <%= interval * 1000 %>,
        //   pointStart: <%= stats_from.to_i * 1000 %>,
        //   data: <%= Array.new(main_usages.size, 100) %>
        // },
        {
          type: 'line',
          name: 'Pro plan',
          visible: false,
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= stats_from.to_i * 1000 %>,
          data: <%= Array.new(main_usages.size, monthly_plan_limit) %>
        },
        // {
        //   type: 'line',
        //   name: 'Daily normal average (huge)',
        //   pointInterval: <%= interval * 1000 %>,
        //   pointStart: <%= stats_from.to_i * 1000 %>,
        //   data: <%= Array.new(main_usages.size, 10000) %>
        // }
      ],
      plotOptions: {
        column: {
          shadow: false,
          stacking: 'normal'
        },
        line: {
          lineWidth: 2,
          marker: {
            enabled: false
          },
          shadow: false,
          states: {
            hover: {
              lineWidth: 2,
              marker: {
                enabled: true
              }
            }
          }
        }
        // area: {
        //   fillColor: "#405f92",
        //   lineColor: "#5d6778",
        //   lineWidth: 3,
        //   marker: {
        //     lineWidth: 1,
        //     enabled: false,
        //     symbol: 'circle',
        //     radius: 3,
        //     states: {
        //       hover: {
        //         enabled: true
        //       }
        //     }
        //   }
        // }
      },
      credits: {
        enabled: true,
        text: "Generation time: <%= Time.now.to_s(:format => :fully_full) %> / Copyright © <%= Date.today.year %> - SublimeVideo®",
        href: "http://sublimevideo.net"
      }
    });
    console.log(chart.series);
  });
</script>