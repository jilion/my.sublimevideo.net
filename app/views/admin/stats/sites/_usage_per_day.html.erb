<%
from_days ||= 60
stats_from  = from_days.days.ago.beginning_of_day

usages = Stat.usages(stats_from, Date.today, { :site_id => site.try(:id) })
usages = %w[loader_usage invalid_usage dev_usage main_usage all_usage invalid_usage_cached dev_usage_cached main_usage_cached].inject({}) do |memo, type|
  memo[type] = usages.map { |u| u[type].to_i }
  memo["total_#{type}"] = memo[type].inject([]) { |memo, u| memo << ((memo.last || 0) + u) }
  memo
end
plans = Plan.all
%>

<script type = "text/javascript" charset="utf-8">
  document.observe("dom:loaded", function() {
    var chart = new Highcharts.Chart({
      chart: <%= raw chart('usage_per_day').to_json %>,
      title: {
        text: '<%= "VPV per day, total and averages for #{site.hostname}" %>'
      },
      subtitle: <%= raw usage_date_subtitle(stats_from).to_json %>,
      xAxis: {
        type: 'datetime',
        showFirstLabel: true,
        showLastLabel: true
      },
      yAxis: {
        title: {
          text: 'Video-page views',
          margin: 70
        },
        labels: {
          formatter: function() {
            return Highcharts.numberFormat(this.value, 0, '.', "'");
          }
        }
      },
      legend: <%= raw usage_legend.to_json %>,
      tooltip: {
        formatter: function() {
          var date = "<strong>" + Highcharts.dateFormat("%B %e,  %Y", this.x) + "</strong><br/>";
          
          if(this.series.name == "Billing days") return date;
          
          var percentage_of_total = '';
          var percentage_of_limit = '';
          
          if (["Invalid", "Invalid cached", "Dev", "Dev cached", "Main", "Main cached"].indexOf(this.series.name) != -1) {
            percentage_of_total = " (" + Highcharts.numberFormat(this.percentage, 1) + "%)";
          }
          else if (this.series.name == "Loader") {
            percentage_of_limit = "Loader / Player: " + Highcharts.numberFormat((this.y / (this.total - this.y)), 1);
          }
          if(percentage_of_limit) percentage_of_limit = "<br/>" + percentage_of_limit
          
          return date + this.series.name + ": " + Highcharts.numberFormat(this.y, 0) + percentage_of_total + percentage_of_limit;
        }
      },
      series: [
        <%= raw serie(usages["loader_usage"], 'Loader', '#AA0', :visible => false).to_json %>,
        <%= raw serie(usages["invalid_usage_cached"], 'Invalid cached', '#F80').to_json %>,
        <%= raw serie(usages["invalid_usage"], 'Invalid', '#F00').to_json %>,
        <%= raw serie(usages["dev_usage_cached"], 'Dev cached', '#1C1').to_json %>,
        <%= raw serie(usages["dev_usage"], 'Dev', '#3F3').to_json %>,
        <%= raw serie(usages["main_usage_cached"], 'Main cached', '#08F').to_json %>,
        <%= raw serie(usages["main_usage"], 'Main', '#00F').to_json %>,
        
        <%= raw serie(average_array(usages["total_loader_usage"]), 'AVG Loader', '#FF0', :type => 'line', :visible => false).to_json %>,
        <%= raw serie(average_array(usages["total_invalid_usage"]), 'AVG Invalid', '#FC3', :type => 'line', :visible => false).to_json %>,
        <%= raw serie(average_array(usages["total_dev_usage"]), 'AVG Dev', '#6F6', :type => 'line', :visible => false).to_json %>,
        <%= raw serie(average_array(usages["total_main_usage"]), 'AVG Main', '#0FF', :type => 'line').to_json %>,
        
        <%= raw serie(usages["total_main_usage"], 'TOT Main', '', :type => 'line', :visible => false).to_json %>,
        <%= raw serie(usages["total_all_usage"], 'TOT All', '', :type => 'line', :visible => false).to_json %>,
        
        <%=
          raw(plans.inject([]) do |memo, plan|
            memo << serie(Array.new(usages["main_usage"].size, plan.player_hits / 30), "AVG #{plan.name.humanize}", '', :type => 'line', :visible => false).to_json
            memo
          end.join(","))
        %>
        ,
        <%=
          raw(plans.inject([]) do |memo, plan|
            memo << serie(Array.new(usages["main_usage"].size, plan.player_hits), "LIM #{plan.name.humanize}", '', :type => 'line', :visible => false).to_json
            memo
          end.join(","))
        %>
      ],
      plotOptions: <%= raw usage_plot_options(stats_from).to_json %>,
      credits: <%= raw credits.to_json %>
    });
  });
</script>