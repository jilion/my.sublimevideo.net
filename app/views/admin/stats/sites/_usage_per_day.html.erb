<%
interval = 1.day
moving_average_days_count = @moving_avg
title      = "VPV per day, total and averages for #{site.hostname} between #{l(@date_range_from, :format => :small)} and #{l(@date_range_to, :format => :small)}"
days_range = (@date_range_from.to_date..@date_range_to.to_date)
days_count = days_range.to_a.size

usages = Stat.usages(@date_range_from - (moving_average_days_count-1).days, @date_range_to, { :site_id => site.try(:id) })
usages = ((@date_range_from - (moving_average_days_count-1).days).to_date..@date_range_to.to_date).inject([]) do |memo, day|
  usage_on_day = usages.detect { |u| u["day"].to_date == day }
  memo << (usage_on_day ? usage_on_day : { "day" => day })
end

loader_usages  = usages.map { |u| u["loader_usage"].to_i }
invalid_usages = usages.map { |u| u["invalid_usage"].to_i }
dev_usages     = usages.map { |u| u["dev_usage"].to_i }
main_usages    = usages.map { |u| u["main_usage"].to_i }
all_usages     = usages.map { |u| u["all_usage"].to_i }

total_main_usages = main_usages[moving_average_days_count-1..-1].inject([]) { |memo, u| memo << ((memo.last || 0) + u) }
total_all_usages  = all_usages[moving_average_days_count-1..-1].inject([]) { |memo, u| memo << ((memo.last || 0) + u) }

plans_limit = [[3_000, "Comet"], [50_000, "Star"], [200_000, "Galaxy"], [1_000_000, "Universe"]]

selected_plan = case main_usages[moving_average_days_count-1..-1].total_sum / days_count
when (0..(plans_limit[0][0] / 30))
  0
when ((plans_limit[0][0] / 30)..(plans_limit[1][0] / 30))
  1
when ((plans_limit[1][0] / 30)..(plans_limit[2][0] / 30))
  2
else
  3
end
prorated_plan_limit = (28..31).include?(days_count) ? plans_limit[selected_plan][0] : (plans_limit[selected_plan][0] / 30) * days_count
%>
<script type = "text/javascript" charset="utf-8">
  document.observe("dom:loaded", function() {
    new Highcharts.Chart({
      chart: {
        renderTo: 'usage_per_day',
        marginTop: 120,
        marginBottom: 40,
        backgroundColor: '#EEEEEE',
        animation: false
      },
      title: {
        text: '<%= title %>'
      },
      xAxis: {
        type: 'datetime',
        tickInterval: <%= 1.day * 1000 %>,
        labels: {
          step: <%= (((@date_range_to - @date_range_from) / 1.day) / 12).floor %>
        }
      },
      yAxis: {
        title: {
          text: 'Video-page views',
          margin: 50
        },
        labels: {
          formatter: function() {
            return Highcharts.numberFormat(this.value, 0);
          }
        }
      },
      legend: {
        verticalAlign: 'top',
        y: 30,
        width: 950,
        symbolWidth: 12,
        backgroundColor: '#FFFFFF',
        borderColor: '#CCCCCC'
      },
      tooltip: {
        borderWidth: 0,
        backgroundColor: "rgba(0, 0, 0, .70)",
        style: {
        	color: '#FFFFFF',
        	padding: '5px'
        },
        formatter: function() {
          var date = "<strong>" + Highcharts.dateFormat("%B %e,  %Y", this.x) + "</strong><br/><br/>";
          var percentage_of_total = '';
          var percentage_of_limit = '';

          if (["Invalid", "Invalid cached", "Dev", "Dev cached", "Main", "Main cached"].indexOf(this.series.name) != -1) {
            percentage_of_total = " (" + Highcharts.numberFormat(this.percentage, 1) + "%)";
            percentage_of_total += "<br/>Total: " + Highcharts.numberFormat(this.total, 0);
          }
          else if (this.series.name == "Loader") {
            percentage_of_limit = "Loader / Player: " + Highcharts.numberFormat((this.y / (this.total - this.y)), 1);
          }
          else if (this.series.name == "TOT Main") {
            percentage_of_limit = Highcharts.numberFormat((this.y / <%= (plans_limit[selected_plan][0] / 30) * days_count %>)*100, 0) + "% of <%= plans_limit[selected_plan][1] %> plan limit";
          }
          else if (this.series.name == "AVG Total") {
            percentage_of_limit = "Monthly estimate: " + Highcharts.numberFormat(this.y*30, 0);
          }
          if(percentage_of_limit) percentage_of_limit = "<br/>" + percentage_of_limit

          return date + this.series.name + ": " + Highcharts.numberFormat(this.y, 0) + percentage_of_total + percentage_of_limit;
        }
      },
      series: [
      {
        type: 'column',
        name: 'Loader',
        visible: false,
        color: '#AA0',
        data: <%= loader_usages[moving_average_days_count-1..-1] %>
      },
      {
        type: 'column',
        name: 'Invalid cached',
        color: '#F80',
        data: <%= usages.map { |u| u["invalid_usage_cached"].to_i }[moving_average_days_count-1..-1] %>
      },
      {
        type: 'column',
        name: 'Invalid',
        color: '#F00',
        data: <%= invalid_usages[moving_average_days_count-1..-1] %>
      },
      {
        type: 'column',
        name: 'Dev cached',
        color: '#1C1',
        data: <%= usages.map { |u| u["dev_usage_cached"].to_i }[moving_average_days_count-1..-1] %>
      },
      {
        type: 'column',
        name: 'Dev',
        color: '#3F3',
        data: <%= dev_usages[moving_average_days_count-1..-1] %>
      },
      {
        type: 'column',
        name: 'Main cached',
        color: '#08F',
        data: <%= usages.map { |u| u["main_usage_cached"].to_i }[moving_average_days_count-1..-1] %>
      },
      {
        type: 'column',
        name: 'Main',
        color: '#00F',
        data: <%= main_usages[moving_average_days_count-1..-1] %>
      },

      {
        type: 'line',
        name: 'AVG Loader',
        visible: false,
        color: '#FF0',
        data: <%= moving_average(loader_usages, moving_average_days_count) %>
      },
      {
        type: 'line',
        name: 'AVG Invalid',
        visible: false,
        color: '#FC3',
        data: <%= moving_average(invalid_usages, moving_average_days_count) %>
      },
      {
        type: 'line',
        name: 'AVG Dev',
        visible: false,
        color: '#6F6',
        data: <%= moving_average(dev_usages, moving_average_days_count) %>
      },
      {
        type: 'line',
        name: 'AVG Total',
        color: '#0FF',
        data: <%= moving_average(all_usages, moving_average_days_count) %>
      },

      {
        type: 'line',
        name: 'TOT Main',
        visible: false,
        data: <%= total_main_usages %>
      },
      {
        type: 'line',
        name: 'TOT All',
        visible: false,
        data: <%= total_all_usages %>
      },

      {
        type: 'line',
        name: 'AVG <%= plans_limit[selected_plan][1] %>',
        data: <%= Array.new(main_usages.size - moving_average_days_count + 1, plans_limit[selected_plan][0]/30) %>
      },
      {
        type: 'line',
        name: 'LIMIT <%= plans_limit[selected_plan][1] %>',
        visible: false,
        data: <%= Array.new(main_usages.size - moving_average_days_count + 1, prorated_plan_limit) %>
      },
      {
        type: 'line',
        name: 'LIMIT <%= plans_limit[selected_plan][1] %> + 30%',
        visible: false,
        data: <%= Array.new(main_usages.size - moving_average_days_count + 1, prorated_plan_limit * 1.3) %>
      }],
      plotOptions: {
        column: {
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= @date_range_from.to_i * 1000 %>,
          stacking: 'normal',
          shadow: false
        },
        line: {
          pointInterval: <%= interval * 1000 %>,
          pointStart: <%= @date_range_from.to_i * 1000 %>,
          lineWidth: 2,
          marker: {
            enabled: false
          },
          shadow: false,
          states: {
            hover: {
              lineWidth: 2,
              marker: {
                enabled: true
              }
            }
          }
        }
      },
      credits: {
        enabled: true,
        text: "Generation time: <%= Time.now.to_s(:format => :fully_full) %> / Copyright © <%= Date.today.year %> - SublimeVideo®",
        href: "http://sublimevideo.net"
      }
    });
  });
</script>
<div id="usage_per_day" style="width:100%; height:300px;"></div>