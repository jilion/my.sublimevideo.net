<%
sites_count = Site.select("COUNT(*) as total, DATE(created_at) as day").group("day").map { |site| { day: site.day.to_date, total: site.total.to_i } }

stats_from  = sites_count.min { |a,b| a[:day] <=> b[:day] }[:day].to_time
sites_count = (stats_from.to_date..Time.now.utc.to_date).inject([]) do |memo, day|
  memo << (sites_count.detect { |sc| sc[:day].to_date == day }.try(:[], :total) || 0)
end

graph = Graph.new do |g|
  g.option(chart: chart('new_sites_per_day'))
  g.option(title: { text: "New sites per day" })
  g.option(subtitle: usage_date_subtitle(start_at: stats_from, end_at: Time.now.utc, date_format: :seconds_timezone))
  g.option(legend: legend(width: 350))
  g.option(xAxis: { type: 'datetime', showFirstLabel: true, showLastLabel: true })
  g.raw_option(%(yAxis: {
    title: {
      text: 'Number of sites created',
      margin: 30
    },
    allowDecimals: false,
    min: 0
  }))
  g.raw_option(%(tooltip: {
    formatter: function() {
      var date = "<strong>" + Highcharts.dateFormat("%B %e,  %Y", this.x) + "</strong><br/>";
      return date + this.series.name + ": " + Highcharts.numberFormat(this.y, 0);
    }
  }))
  g.option(series: [
    serie(sites_count, 'New sites'),
    serie(evolutive_average_array(sites_count), 'AVG new sites', type: 'line'),
    serie(sites_count.inject([]) { |memo, sc| memo << ((memo.last || 0) + sc) }, 'TOT new sites', type: 'line', visible: false),
  ])
  g.option(plotOptions: plot_options(stats_from))
  g.option(credits: credits)
end
%>

<div id="new_sites_per_day" style="width: 100%; height: 800px;"><%= raw graph.draw(observe: request.xhr? ? false : "dom:loaded") %></div>
