= page_title "JavaScript API Listeners"

:textile

  "(c)@onEnd@":#onEnd "(c)@onStart@":#onStart "(c)@ready@":#ready

  See also "Using the JavaScript API":/javascript-api/usage and "Methods":/javascript-api/methods.

  <div class="breakline"></div>

  h4. Note on using listeners

  Always write your listeners inside the "(c)@sublimevideo.ready@":#ready callback in order to be sure the @sublimevideo@ API object is actually available.

  <div class="breakline"></div>

  h3(#onEnd). @sublimevideo.onEnd(handler)@

  * <span class="param">@handler@</span> (@Function@) – The function to call when the event occurs.

  Use this method to be notified when playback has reached the end of the video.

  **The Handler**

.code
  :harsh
    = "#!harsh #{harsh_options(:javascript)}"
    function handler(videoObject){
      // Code to execute once a video ends!
    });

:textile
  *_videoObject_* is the video that generated the event ("ended" in this case) and it has the following properties:
    * @element@: a reference to the @<video>@ DOM element
    * @mode@: either "_html5_" or "_flash_"

  **Example**

.code
  :harsh
    = "#!harsh #{harsh_options(:javascript)}"
    sublimevideo.ready(function(){
      sublimevideo.onEnd(function(sv){
        alert("Video has ended!");
      });
    });

:textile
  You can use this listener to restore the video to its initial state (that shows the poster frame and the play button) automatically when the video ends.
  See "Returning to the initial state once video playback ends":/returning-to-the-initial-state-once-video-playback-ends for further instructions.

  h3(#onStart). @sublimevideo.onStart(handler)@

  * <span class="param">@handler@</span> (@Function@) – The function to call when the event occurs.

  Use this method to be notified when a video is started.
  Please note this is not called every time the video starts playing after a pause event (it's called once when the user clicks on the initial play button).

  **The Handler**

.code
  :harsh
    = "#!harsh #{harsh_options(:javascript)}"
    function handler(videoObject){
      // Code to execute once a video starts!
    });

:textile
  *_videoObject_* is the video that generated the event ("started" in this case) and it has the following properties:
    * @element@: a reference to the @<video>@ DOM element
    * @mode@: either "_html5_" or "_flash_"

  **Examples**

.code
  :harsh
    = "#!harsh #{harsh_options(:javascript)}"
    sublimevideo.ready(function(){
      sublimevideo.onStart(function(sv){
        alert("Video has started!");
      });
    });

:textile
  You can see a real example on our "demo page":http://sublimevideo.net/demo where we use "(c)@sublimevideo.onStart@":#onStart to update the label showing the current mode of the player (HTML5 or Flash). We only do this for the first video in the demo, but there are different videos on that page. In order to target the first video we use the *_videoObject_* parameter passed to the handler function.

  Here is the code we use in the demo page to detect when the @<video>@ with the "_single_video_" @id@ has started:

.code
  :harsh
    = "#!harsh #{harsh_options(:javascript)}"
    sublimevideo.ready(function(){
      sublimevideo.onStart(function(sv){
        if (sv.element.id == "single_video"){
          //...
        }
      });
    });

:textile
  h3(#ready). @sublimevideo.ready(handler)@

  * <span class="param">@handler@</span> (@Function@) – The function to call when the event occurs.

  The @sublimevideo@ API object might not be immediately available when the DOM is loaded.

  You should avoid making calls to the SublimeVideo JavaScript API in your own DOM loaded/ready method (e.g. @DOMContentLoaded@, jQuery's @.ready()@ or Prototype's @dom:loaded@) unless you are sure those calls will not be executed immediately, but only upon a future user action (so that, by that time, we'll be sure the @sublimevideo@ API object has been loaded).

  Use "(c)@sublimevideo.ready@":#ready to be notified when the @sublimevideo@ API object is actually available or if you want to make calls to our JavaScript API as soon as possible after the page is loaded.

  **The Handler**

.code
  :harsh
    = "#!harsh #{harsh_options(:javascript)}"
    function handler(){
      // Code to execute once the SublimeVideo JS API is ready!
    });

:textile
  **Example**

.code
  :harsh
    = "#!harsh #{harsh_options(:javascript)}"
    sublimevideo.ready(function(){
      alert("SublimeVideo API is ready!");
    });
