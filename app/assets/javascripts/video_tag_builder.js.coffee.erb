#= require video-size-checker/sublimevideo-size-checker.min.js

document.observe 'dom:loaded', ->
  videoTagBuilder = new VideoTagBuilder()

class VideoTagBuilder
  constructor: (poster_id = 'poster', sources_class = 'video_src', ratio_keeper = 'keep_ratio') ->
    @poster        = $(poster_id)
    @sources       = $$(".#{sources_class}")
    @ratio_keeper  = $(keep_ratio)
    @video         = null
    @video_size    = { width: null, height: null }
    # @poster_canvas = $('c')
    # @poster_canvas_context = if @poster_canvas.getContext then @poster_canvas.getContext('2d') else null
    # @poster_export = $('poster_export')

    sublimevideo.load()
    sublimevideo.ready =>
      this.updateLivePreview()

    this.setupObservers()

  setupObservers: ->
    this.setupPosterObserver()
    this.setupVideoSizeCheckerObserver()
    this.setupSourcesObserver()
    this.setupDimensionsObserver()
    this.setupRatioKeeperObserver()

  setupPosterObserver: ->
    @poster.observe 'keyup', (event) =>
      this.updateLivePreview() if this.urlHasChanged event.target
    , false

    # $("posterframe_generator").observe 'click', (event) =>
    #   return false if @video is null || @poster_canvas_context is null || @video.paused || @video.ended
    #
    #   @poster_canvas.width  = @video_size['width'];
    #   @poster_canvas.height = @video_size['height'];
    #   @poster_canvas_context.drawImage(@video, 0, 0, parseInt(@video_size['width']), parseInt(@video_size['height']))
    #
    #   dataURL = @poster_canvas.toDataURL()
    #   @poster_export.src = img
    # , false

  setupVideoSizeCheckerObserver: ->
    @sources[0].observe 'keyup', (event) =>
      this.setVideoDimensionsToInputFields event.target.value if this.urlHasChanged event.target
    , false

  setupSourcesObserver: ->
    @sources.each (input) =>
      input.observe 'keyup', (event) =>
        this.updateLivePreview() if this.urlHasChanged event.target
      , false

  setupDimensionsObserver: ->
    ['width', 'height'].each (dimension) =>
      $("final_#{dimension}").observe 'keyup', (event) =>
        @video_size[dimension] = event.target.value
        if not /\d+/.test @video_size[dimension]
          event.target.value = @video_size[dimension] = null
        else if $('keep_ratio').checked
          this.updateDimensionField this.oppositeDimension(dimension), @video_size[dimension]
        this.updateLivePreview()
      , false

  setupRatioKeeperObserver: ->
    $('keep_ratio').observe 'click', (event) =>
      # If the "keep ratio" check box has been checked, reset the right ratio to the current final dimensions
      if event.target.checked
        this.updateDimensionField 'height', @video_size['width']
        this.updateLivePreview()

  oppositeDimension: (dimension) ->
    if dimension == 'width' then 'height' else 'width'

  urlHasChanged: (input) ->
    if (!input.getAttribute('data-last_url')? and input.value != "") or input.getAttribute('data-last_url') != input.value
      input.setAttribute('data-last_url', input.value);
      true
    else
      false

  updateLivePreview: ->
    if $('live_preview_video')
      sublimevideo.unprepare 'live_preview_video'
      $('live_preview_video').remove()

    [poster, dimensions, sources] = [$('poster').value, [@video_size['width'] or 300, @video_size['height'] or 200], []]
    console.log(dimensions);
    $$('.video_src').each (input) =>
      source = $(input.id).value
      if source != '' then sources.push new Element('source', { src: source }) if this.validUrl source

    @video = new Element 'video',
      id: 'live_preview_video'
      className: 'sublime'
      poster: poster
      width: dimensions[0]
      height: dimensions[1]
      preload: 'none'
    sources.each (source) =>
      @video.insert source

    if @video.height > 0 then $('live_preview_video_wrap').setStyle({ height: "#{@video.height}px" })
    $('live_preview_video_wrap').insert @video

    sublimevideo.prepare 'live_preview_video'

    $('video_tag_code').update "<video class=\"sublime\" poster=\"#{poster}\" width=\"#{dimensions[0]}\" height=\"#{dimensions[1]}\" preload=\"none\">#{this.sources_to_s sources}\n</video>"

  sources_to_s: (sources) ->
    s = ""
    sources.each (source) ->
      s += "\n\t<source src=\"#{source.src}\" />"
    s

  setVideoDimensionsToInputFields: (url) ->
    if this.validUrl url
      if $('video-dimensions-ajax-loading')
        $('video-dimensions-ajax-loading').show()
      else
        spinner = new Element 'img',
          id: 'video-dimensions-ajax-loading'
          src: ''#'<%= asset_data_uri 'small_spinner.gif' %>'
          className: 'ajax-loading'
        $('mp4_normal').appendChild spinner

      SublimeVideoSizeChecker.getVideoSize url, (u, dimensions) =>
        new_width  = if dimensions? then dimensions.width else '???'
        new_height = if dimensions? then dimensions.height else '???'
        $('original_width').innerHTML = new_width
        $('original_height').innerHTML = new_height
        $('video-dimensions-ajax-loading').hide()

        if @video_size['width'] is null
          $('final_width').value = @video_size['width'] = $('original_width').innerHTML
        this.updateDimensionField 'height', @video_size['width']
        this.updateLivePreview()

  updateDimensionField: (field, size) ->
    oppositeField = this.oppositeDimension(field)

    if $("original_#{oppositeField}").innerHTML != '???' and @video_size[oppositeField] != null
      ratio = parseInt($("original_#{field}").innerHTML) / parseInt($("original_#{oppositeField}").innerHTML)
      $("final_#{field}").value = @video_size[field] = Math.round(size * ratio)

  validUrl: (url) ->
    /^https?:\/\/.+\.\w+(\?+.*)?$/.test url