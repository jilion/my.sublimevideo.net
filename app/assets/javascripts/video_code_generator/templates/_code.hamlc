- if @video.viewable()
  - errors   = { src_invalid: 0, not_found: 0 }
  - warnings = { mime_type_invalid: 0 }
  - _.each @video.get('sources').allUsedNotEmpty(), (source) ->
    - if !source.srcIsUrl()
      - errors['src_invalid'] += 1
    - else if !source.get('found')
      - errors['not_found'] += 1
    - else if !source.validMimeType()
      - warnings['mime_type_invalid'] += 1

  - if errors['src_invalid'] > 0 or errors['not_found'] > 0
    .notices
      %strong Errors:
      %ul
        - if errors['src_invalid'] > 0
          %li.notice.error= "#{errors['src_invalid']} source#{if errors['src_invalid'] > 1 then 's are' else ' is'} invalid."
        - if errors['not_found'] > 0
          %li.notice.error= "#{errors['not_found']} source#{if errors['not_found'] > 1 then 's' else ''} can't be found."

  - if warnings['mime_type_invalid'] > 0
    .notices
      %strong Warnings:
      %ul
        %li.notice.warning= "#{warnings['mime_type_invalid']} source#{if warnings['mime_type_invalid'] > 1 then 's seem' else ' seems'} to have an invalid MIME Type."

  != this.embedTemplate(builder: @builder, loader: @loader, iframe: @iframe, video: @video)
  .spacer

  - if @builder.get('builderClass') is 'iframe_embed'
    != @iframeContentTemplate(builder: @builder, loader: @loader, iframe: @iframe, video: @video, videoTagTemplate: @videoTagTemplate)
    .spacer

  - if @builder.get('builderClass') is 'lightbox' and @video.get('thumbnail').get('magnifyingGlass')
    != @cssTemplate(video: @video)

- else
  .notices
    %ul
      %li.notice.error.no_usable_source Please provide a valid video source.